// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(uuid())
  userId    String    @unique
  name      String
  imageUrl  String    @db.Text
  email     String    @db.Text
  Server    Server[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  member    Member[]
  channel   Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  member     Member[]
  channel    Channel[]

  @@index([profileId])
}

enum MemeberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String      @id @default(uuid())
  role      MemeberRole @default(GUEST)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId               String
  server                 Server         @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  message                Message[]
  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")
  direcMessage           DirecMessage[]

  @@index([profileId])
  @@index([serverId])
}

enum TypeChannel {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      TypeChannel @default(TEXT)
  profileId String
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String
  server    Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  message   Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @unique @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  delete    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id           String         @id @unique @default(uuid())
  memberOneId  String
  memberOne    Member         @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwoId  String
  memberTwo    Member         @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  direcMessage DirecMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

model DirecMessage {
  id       String  @id @default(uuid())
  content  String  @db.Text
  fileUrl  String? @db.Text
  memberid String
  member   Member  @relation(fields: [memberid], references: [id])

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  delete         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
  @@index([memberid])
}
